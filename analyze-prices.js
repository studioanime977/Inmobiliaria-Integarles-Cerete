const fs = require('fs');
const path = require('path');

// Leer el √≠ndice
const indexPath = path.join(__dirname, 'assets', 'data', 'content-index.json');
const index = JSON.parse(fs.readFileSync(indexPath, 'utf8'));

console.log('üìä AN√ÅLISIS DE PRECIOS - Inmobiliaria Integrales Ceret√©\n');
console.log('‚ïê'.repeat(60));

// Filtrar items con precio
const itemsWithPrice = index.items.filter(item => item.price && typeof item.price === 'number');

console.log(`\nüìà Total de propiedades: ${index.totalItems}`);
console.log(`üí∞ Propiedades con precio: ${itemsWithPrice.length}`);
console.log(`‚ùì Propiedades sin precio: ${index.totalItems - itemsWithPrice.length}\n`);

// An√°lisis por categor√≠a
const categories = ['locales', 'viviendas'];

categories.forEach(category => {
  const items = itemsWithPrice.filter(item => item.category === category);
  
  if(items.length === 0) {
    console.log(`\nüè¢ ${category.toUpperCase()}: Sin precios disponibles`);
    return;
  }
  
  const prices = items.map(item => item.price).sort((a, b) => a - b);
  const min = Math.min(...prices);
  const max = Math.max(...prices);
  const avg = Math.round(prices.reduce((a, b) => a + b, 0) / prices.length);
  const median = prices[Math.floor(prices.length / 2)];
  
  console.log(`\nüè¢ ${category.toUpperCase()}`);
  console.log('‚îÄ'.repeat(60));
  console.log(`   Total: ${items.length} propiedades`);
  console.log(`   üíµ Precio m√≠nimo: $${min.toLocaleString('es-CO')}`);
  console.log(`   üí∞ Precio m√°ximo: $${max.toLocaleString('es-CO')}`);
  console.log(`   üìä Precio promedio: $${avg.toLocaleString('es-CO')}`);
  console.log(`   üìà Precio mediano: $${median.toLocaleString('es-CO')}`);
  
  // Rangos sugeridos
  console.log(`\n   üí° Rangos sugeridos para b√∫squeda:`);
  const range1 = Math.round(min / 100000) * 100000;
  const range2 = Math.round(median / 100000) * 100000;
  const range3 = Math.round(max / 100000) * 100000;
  
  console.log(`      ‚Ä¢ Econ√≥mico: $${range1.toLocaleString('es-CO')} - $${range2.toLocaleString('es-CO')}`);
  console.log(`      ‚Ä¢ Medio: $${range2.toLocaleString('es-CO')} - $${range3.toLocaleString('es-CO')}`);
  console.log(`      ‚Ä¢ Premium: Desde $${range3.toLocaleString('es-CO')}`);
  
  // Distribuci√≥n por rangos
  console.log(`\n   üìä Distribuci√≥n por rangos:`);
  const ranges = [
    { label: 'Menos de 500k', min: 0, max: 500000 },
    { label: '500k - 700k', min: 500000, max: 700000 },
    { label: '700k - 1M', min: 700000, max: 1000000 },
    { label: 'M√°s de 1M', min: 1000000, max: Infinity }
  ];
  
  ranges.forEach(range => {
    const count = prices.filter(p => p >= range.min && p < range.max).length;
    if(count > 0) {
      const percentage = Math.round((count / prices.length) * 100);
      const bar = '‚ñà'.repeat(Math.round(percentage / 5));
      console.log(`      ${range.label.padEnd(20)} ${count.toString().padStart(2)} (${percentage}%) ${bar}`);
    }
  });
});

// An√°lisis por estado (arriendo/venta)
console.log(`\n\nüìã AN√ÅLISIS POR ESTADO`);
console.log('‚ïê'.repeat(60));

const statuses = ['arriendo', 'venta'];

statuses.forEach(status => {
  const items = itemsWithPrice.filter(item => {
    const itemStatus = item.status || (item.category === 'locales' ? 'arriendo' : 'venta');
    return itemStatus === status;
  });
  
  if(items.length === 0) {
    console.log(`\n${status.toUpperCase()}: Sin propiedades`);
    return;
  }
  
  const prices = items.map(item => item.price).sort((a, b) => a - b);
  const min = Math.min(...prices);
  const max = Math.max(...prices);
  
  console.log(`\n${status.toUpperCase()}`);
  console.log('‚îÄ'.repeat(60));
  console.log(`   Total: ${items.length} propiedades`);
  console.log(`   üíµ Desde: $${min.toLocaleString('es-CO')}`);
  console.log(`   üí∞ Hasta: $${max.toLocaleString('es-CO')}`);
  
  // Ejemplos de b√∫squeda
  const example1 = Math.round(min / 100000) * 100000;
  const example2 = Math.round((min + max) / 2 / 100000) * 100000;
  
  console.log(`\n   üí¨ Ejemplos de b√∫squeda:`);
  console.log(`      ‚Ä¢ "${example1 / 1000}k-${example2 / 1000}k"`);
  console.log(`      ‚Ä¢ "desde ${example1 / 1000}k"`);
  console.log(`      ‚Ä¢ "hasta ${example2 / 1000}k"`);
});

console.log('\n' + '‚ïê'.repeat(60));
console.log('‚úÖ An√°lisis completado\n');
